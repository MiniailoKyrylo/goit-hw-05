# Завдання - 1
# Реалізуйте функцію caching_fibonacci, яка створює та використовує кеш для зберігання і повторного використання вже обчислених значень чисел Фібоначчі.

# Функція для зберігання кешу
def caching_fibonacci():

    CACHE = {0: 0, 1: 1} # Кеш для зберігання рішень з першими двома початковими значеннями

    # Рекурсивна функція для послідовності Фібоначчі
    def fibonacci(value):

        # Перевірка чи є значення у кеші
        if value in CACHE:
            return CACHE[value]
        
        # Розрахунок значення для числа з рекурсією
        fib_value = fibonacci(value - 1) + fibonacci(value - 2)
        CACHE[value] = fib_value
        return fib_value
    
    # Повернення функції
    return fibonacci

# Виконання завдання - 1
# fibonacci = caching_fibonacci()
# print(fibonacci(20))

# Завдання - 2
# Необхідно створити функцію generator_numbers, яка буде аналізувати текст, ідентифікувати всі дійсні числа, що вважаються частинами доходів, 
# і повертати їх як генератор. Дійсні числа у тексті записані без помилок, чітко відокремлені пробілами з обох боків. 
# Також потрібно реалізувати функцію sum_profit, яка буде використовувати generator_numbers для підсумовування цих чисел і обчислення загального прибутку.

# Імпортуємо модуль для парсингу значень у тексті
import re

# Функція парсингу, поступово шукає числа з плавою точкою у тексті за паттерном та повертає їх значення
def generator_numbers(text):
    pattern = r'\b\d+(\.\d+)?\b' 
    for value in re.finditer(pattern, text):
        yield float(value.group())

# Функція повертає суму значеннь які будуть сформовані у функції парсингу
def sum_profit(text):
    return sum(generator_numbers(text))

# Виконання завдання - 2
text = "Загальний дохід працівника складається з декількох частин: 1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 i 324.00 доларів."
print(sum_profit(text))